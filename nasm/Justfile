OUTDIR := "./target"
alias b := build
alias br := build-release
alias ba := build-all
alias r := run
alias c := clean
alias d := disasm
alias i := info
alias w := watch
alias l := list

# default recipe
default: 
    @just --list

# build a specific binary with debug info
build name: 
    @printf '> BUILDING: {{name}}\n\n'
    @mkdir -p {{OUTDIR}}
    @nasm -Ov -f elf64 -g -F dwarf {{name}}.asm -o {{OUTDIR}}/{{name}}.o
    @stat -c "nasm size: %s bytes" {{OUTDIR}}/{{name}}.o
    @ld {{OUTDIR}}/{{name}}.o -o {{OUTDIR}}/{{name}}
    @stat -c "final size: %s bytes" {{OUTDIR}}/{{name}}

# build a specific binary without debug info (release)
build-release name:
    @printf '> BUILDING RELEASE: {{name}}\n\n'
    @mkdir -p {{OUTDIR}}
    @nasm -Ox -f elf64 {{name}}.asm -o {{OUTDIR}}/{{name}}.o
    @stat -c "nasm size: %s bytes" {{OUTDIR}}/{{name}}.o
    @ld -s --gc-sections {{OUTDIR}}/{{name}}.o -o {{OUTDIR}}/{{name}}
    @strip --strip-all {{OUTDIR}}/{{name}}
    @stat -c "final size: %s bytes" {{OUTDIR}}/{{name}}

# run a specific binary
run name:
    @nasm -f elf64 -g -F dwarf {{name}}.asm -o {{OUTDIR}}/{{name}}.o
    @printf '\n> RUNNING: {{name}}\n\n'
    @{{OUTDIR}}/{{name}}

# build all asm files
build-all:
    @mkdir -p {{OUTDIR}}
    @for f in *.asm; do \
        echo "Building $f..."; \
        nasm -f elf64 -g -F dwarf "$f" -o "{{OUTDIR}}/${f%.asm}.o" && \
        ld "{{OUTDIR}}/${f%.asm}.o" -o "{{OUTDIR}}/${f%.asm}"; \
    done

# clean build artifacts
clean:
    @printf '> CLEANING BUILD ARTIFACTS\n'
    @rm -rf {{OUTDIR}}
    @rm -f *.bin *.o

# disassemble a specific binary
disasm name: (build name)
    @printf '> DISASSEMBLING: {{name}}\n'
    @objdump -D -S {{OUTDIR}}/{{name}}

# show debug info for a binary
debug-info name: (build name)
    @printf '> DEBUG INFO FOR: {{name}}\n'
    @objdump -g {{OUTDIR}}/{{name}}
    @readelf --debug-dump=info {{OUTDIR}}/{{name}}

# check file information for specific binary
info name: (build name)
    @printf '> FETCHING FILE INFO FOR: {{name}}\n'
    @file {{OUTDIR}}/{{name}}
    @readelf -h {{OUTDIR}}/{{name}}

# watch for changes and rebuild specific binary
watch name:
    @printf '> WATCHING FOR CHANGES IN: {{name}}\n\n'
    @while inotifywait -q -e modify {{name}}.asm; do just run {{name}}; done

# list available programs
list:
    @ls -1 *.asm | sed 's/\.asm$//'

# create new program from template
new name:
    @cp template.asm {{name}}.asm
    @echo "{{name}}" >> ../.gitignore
    @printf '> CREATED: {{name}}.asm from template\n'
    @printf '> ADDED: {{name}} to .gitignore\n'
